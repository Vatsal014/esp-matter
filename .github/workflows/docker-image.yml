name: Build Docker

on:
  push:
    branches:
      - 'main'
      - 'release/*'
    tags:
      - 'v*.*'

  workflow_dispatch:

env:
  DOCKERHUB_REPO: ${{ github.repository }}
  REQUIRED_IDF_VERSION: v5.2.3

jobs:
  build:
    if: ${{ github.repository_owner == 'Vatsal014' }}
    runs-on: ubuntu-latest
    timeout-minutes: 45  # Prevents premature cancellation

    strategy:
      fail-fast: true
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo apt-get clean
          docker system prune -af

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Clone ESP-Matter (Shallow)
        run: |
          git clone --depth 1 --recurse-submodules --shallow-submodules https://github.com/espressif/esp-matter.git /opt/esp-matter
          echo "ESP_MATTER_PATH=/opt/esp-matter" >> $GITHUB_ENV

      - name: Prepare Artifact Name
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Set Up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=${{ env.DOCKERHUB_REPO }},push-by-digest=true,push=true
          build-args: |
            ESP_MATTER_CLONE_URL=${{ github.server_url }}/${{ github.repository }}.git
            ESP_MATTER_CHECKOUT_REF=${{ github.ref_name }}
            IDF_CHECKOUT_REF=${{ env.REQUIRED_IDF_VERSION }}

      - name: Export Digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload Digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - name: Set Tag Name (For Tags)
        if: ${{ github.ref_type == 'tag' }}
        run: echo "TAG_NAME=$GITHUB_REF_NAME" >> $GITHUB_ENV

      - name: Set Tag Name (For Release Branches)
        if: ${{ github.ref_type == 'branch' && startsWith(github.ref_name, 'release/') }}
        run: echo "TAG_NAME=release-${GITHUB_REF_NAME##release/}" >> $GITHUB_ENV

      - name: Set Tag Name (For Main Branch)
        if: ${{ github.ref_type == 'branch' && github.ref_name == 'main' }}
        run: echo "TAG_NAME=latest" >> $GITHUB_ENV

      - name: Download Digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_REPO }}
          tags: |
            ${{ env.TAG_NAME }}
            ${{ env.TAG_NAME }}_idf_${{ env.REQUIRED_IDF_VERSION }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create Manifest List and Push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.DOCKERHUB_REPO }}@sha256:%s ' *)

      - name: Inspect Image
        run: docker buildx imagetools inspect ${{ env.DOCKERHUB_REPO }}:${{ steps.meta.outputs.version }}
