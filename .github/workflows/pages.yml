name: Build ESP-Matter Light (ESP32C6 Thread)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  Build-Matter:
    runs-on: ubuntu-latest
    container:
      image: espressif/esp-matter:latest

    strategy:
      matrix:
        targets:
          - {example: light, target: esp32c6, prefix: thread_matter, sdkconfig: sdkconfig.defaults.c6_thread}

    steps:
      - name: Free Up Disk Space
        run: |
          echo "Freeing up disk space..."
          sudo apt-get clean
          sudo rm -rf /usr/local/lib/android /opt/ghc /usr/share/dotnet /usr/local/share/powershell
          sudo rm -rf /usr/local/lib/node_modules
          df -h

      - name: Install Dependencies
        run: |
          apt-get update && apt-get install -y git wget flex bison python3 python3-pip cmake ninja-build

      - name: Clone & Set Up ESP-IDF
        run: |
          git clone --recursive --depth 1 https://github.com/espressif/esp-idf.git /opt/esp-idf
          cd /opt/esp-idf
          git checkout v5.3
          ./install.sh
          echo "IDF_PATH=/opt/esp-idf" >> $GITHUB_ENV

      - name: Clone ESP-Matter (Optimized)
        run: |
          git clone --depth 1 https://github.com/espressif/esp-matter.git /opt/esp-matter
          cd /opt/esp-matter
          git submodule update --init --recursive --depth 1 --no-fetch third_party/connectedhomeip
          echo "ESP_MATTER_PATH=/opt/esp-matter" >> $GITHUB_ENV

      - name: Build Application
        run: |
          source $IDF_PATH/export.sh
          cd $ESP_MATTER_PATH/examples/${{ matrix.targets.example }}
          if [ -f "${{ matrix.targets.sdkconfig }}" ]; then
            cp "${{ matrix.targets.sdkconfig }}" sdkconfig
          fi
          idf.py set-target ${{ matrix.targets.target }} build
          cd build
          TARGET_CHIP=$(cat project_description.json | python3 -c 'import sys,json; print(json.load(sys.stdin)["target"])')
          APP_BIN=$(cat project_description.json | python3 -c 'import sys,json; print(json.load(sys.stdin)["app_bin"])')
          OUT_BIN="$GITHUB_WORKSPACE/images/$TARGET_CHIP"_${{ matrix.targets.prefix }}_"$APP_BIN"
          esptool.py --chip $TARGET_CHIP merge_bin -o $OUT_BIN $(cat flash_args | tr '\n' ' ')

      - name: Upload Firmware Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: build-images-${{ matrix.targets.target }}-${{ matrix.targets.prefix }}-${{ matrix.targets.example }}
          path: images/

  Deploy:
    needs:
      - Build-Matter
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    container:
      image: espressif/esp-matter:latest

    steps:
      - name: Download Builds
        uses: actions/download-artifact@v4
        with:
          pattern: build-images-*
          path: images/
          merge-multiple: true

      - name: Generate Launchpad Config
        run: |
          cd images/
          $ESP_MATTER_PATH/tools/launchpad/generate_launchpad_config.sh ${{ github.repository_owner }}
          tree -H '.' -L 1 --noreport -T 'ESP Matter Launchpad Artifacts' -shi --charset utf-8 -I "index.html" -o index.html

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: images/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
